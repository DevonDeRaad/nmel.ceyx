---
title: "run.dsuite"
format:
  html:
    code-fold: show
    code-tools: true
toc: true
toc-title: Document Contents
number-sections: true
embed-resources: true
---

### We are going to run Dsuite to test ABBA/BABA comparisons (more info can be found at: https://github.com/millanek/Dsuite). A detailed tutorial can be found at (https://github.com/millanek/tutorials/tree/master/analysis_of_introgression_with_snp_data).

### Get input vcf
```{r}
#first thing to do is copy a filtered vcf file containing SNPs for all samples you're interested in to the working directory you're using on the cluster, e.g.
#scp -r /Users/devonderaad/Desktop/nmel.ceyx.rad/filtered.snps.vcf.gz d669d153@hpc.crc.ku.edu:/home/d669d153/work/nmel.ceyx/dsuite/

###NOTE: DSUITE cannot tolerate periods in input tip names or species names (must change to underscores) ###
```

### Get input sample assignments
```{r}
library(vcfR)
library(ggplot2)
#we will also read in the vcf to R:
v<-read.vcfR("~/Desktop/nmel.ceyx.rad/filtered.snps.vcf.gz")
#also read in your sample info file
pops<-read.csv("~/Desktop/nmel.ceyx.rad/ceyx.full.sampling.csv")
#it should look roughly like this:
head(pops)
#retain only samples that passed all filtering protocols (assumes that the 'ID' column is identical to sample names in the vcf)
pops<-pops[pops$ID %in% colnames(v@gt),]

#now we can make a popmap file for Dsuite
popmap<-pops[,c(1,5)]

#print popmap to screen
popmap

#we are going to manually change "nigrilore" to "Outgroup"
popmap$admix.assign[popmap$admix.assign == "margarethae"]<-"Outgroup"

#we are going to manually change "coll.west" to "coll_west" to prevent Fbranch from failing
popmap$admix.assign[popmap$admix.assign == "coll.west"]<-"coll_west"

#we are going to manually change "coll.east" to "coll_east"
popmap$admix.assign[popmap$admix.assign == "coll.east"]<-"coll_east"

table(popmap$admix.assign)

#write out this table and copy it into your cluster working directory next to your vcf (make sure to remove column and row names)
#write.table(popmap, file="~/Downloads/ceyx.dsuite.pops.txt", sep="\t", quote=F, row.names = F, col.names=F)
```

### Get input newick tree
```{r}
#This is maybe the trickiest part, you must input a perfectly formatted newick tree showing the species tree topology for the taxa you assigned in your popmap. Use (http://etetoolkit.org/treeview/) to test whether your trees are valid and look the way you want.
#Here it is:
#(Outgroup,(mulcatus,solitarius),(dispar,(gentianus,(sacerdotis,((malaitae,meeki),(nigromaxilla,(coll_east,coll_west)))))));

#paste this tree into a text file named 'nwk.tre', stored in your cluster working directory
```

### We now have all three needed input files to run Dtrios and perform ABBA/BABA tests
```{bash, eval=FALSE}
##run Dtrios
##-c means this is the whole file, -n gives the name prefix for this run, -t gives the guidetree, followed by the vcf and popmap
/home/d669d153/work/Dsuite/Build/Dsuite Dtrios -c -n all.snps -t nwk.tre filtered.snps.vcf.gz ceyx.dsuite.pops.txt
```

### Make plots visualizing results (still on the cluster)
```{bash, eval=FALSE}
#make a 'plot order' text file. Mine just looks like this:
mulcatus
solitarius
dispar
gentianus
sacerdotis
malaitae
meeki
nigromaxilla
coll_east
coll_west

##copy in ruby scripts. I already have them downloaded in another directory. 
cp /home/d669d153/work/todi.subset.2022/dsuite/plot_d.rb .
cp /home/d669d153/work/todi.subset.2022/dsuite/plot_f4ratio.rb .

#If you don't, you can download them with:
wget https://raw.githubusercontent.com/millanek/tutorials/master/analysis_of_introgression_with_snp_data/src/plot_d.rb
wget https://raw.githubusercontent.com/millanek/tutorials/master/analysis_of_introgression_with_snp_data/src/plot_f4ratio.rb

##plot heatmap of Dmin
#the text file is an input file you generated by running Dtrios, that will always end with '_BBAA.txt'
ruby plot_d.rb ceyx.dsuite.pops_all.snps_BBAA.txt plot_order.txt 0.7 all.samples_BBAA_D.svg

##plot heatmap of f4
ruby plot_f4ratio.rb ceyx.dsuite.pops_all.snps_BBAA.txt plot_order.txt 0.2 all.samples_BBAA_f4ratio.svg

##run fbranch on the guidetree, with the Dtrios output ending in 'tree.txt' (guidetree must be rooted on #outgroup)
/home/d669d153/work/Dsuite/Build/Dsuite Fbranch nwk.tre ceyx.dsuite.pops_all.snps_tree.txt > all.snps_Fbranch.txt

#activate python
module load python
#plot the fbranch heatmap with guidetree above
/home/d669d153/work/Dsuite/utils/dtools.py all.snps_Fbranch.txt nwk.tre

#copy the whole directory back onto my local machine
```

### check out results
```{r}
#heatmap of D
knitr::include_graphics("/Users/devonderaad/Desktop/nmel.ceyx.rad/dsuite/all.samples_BBAA_D.svg")

#heatmap of F4
knitr::include_graphics("/Users/devonderaad/Desktop/nmel.ceyx.rad/dsuite/all.samples_BBAA_f4ratio.svg")

#plot of fbranch statistic
knitr::include_graphics("/Users/devonderaad/Desktop/nmel.ceyx.rad/dsuite/fbranch.svg")
```

## Make a manual heatmap of D statistics using R
```{r}
#read in file
bbaa<-read.table("~/Desktop/nmel.ceyx.rad/dsuite/ceyx.dsuite.pops_all.snps_BBAA.txt", header = T)

plot.order<-c("mulcatus","solitarius","dispar","gentianus","sacerdotis","malaitae","meeki","nigromaxilla","coll_east","coll_west")

#if ABBA is always > BABA, then inferred gene flow is always between P2 and P3
bbaa$ABBA>bbaa$BABA

#open empty df to hold results
df<-data.frame(P2=c(),P3=c(),Dmin=c(),p=c())
#for loop over each value of P2
for (i in 1:length(plot.order)){
  #for loop over each value of P3
  for (j in 1:length(plot.order)){
    #record most significant p-value for the given comparison
    min.p<-min(bbaa$p.value[bbaa$P2 == plot.order[i] & bbaa$P3 == plot.order[j] | bbaa$P3 == plot.order[i] & bbaa$P2 == plot.order[j]])
    if(min.p == Inf){
      min.p<- NA
      sig.D<- NA
    }
        else{
          #record the most significant D statistic for the comparison
          sig.D<-bbaa$Dstatistic[bbaa$P2 == plot.order[i] & bbaa$P3 == plot.order[j] | bbaa$P3 == plot.order[i] & bbaa$P2 == plot.order[j]][bbaa$p.value[bbaa$P2 == plot.order[i] & bbaa$P3 == plot.order[j] | bbaa$P3 == plot.order[i] & bbaa$P2 == plot.order[j]] == min.p]
        }
    
    #write info to df
    df<-rbind(df,c(plot.order[i],plot.order[j],sig.D,min.p))
  }
}
#fix colnames
colnames(df)<-c("P2","P3","sig.D","min.p")
df$min.p<-as.numeric(df$min.p)
df$sig.D<-as.numeric(df$sig.D)

#reorder factors
df$P2<-factor(df$P2, levels=plot.order)
df$P3<-factor(df$P3, levels=plot.order)

#plot as heatmap
ggplot(data = df, aes(x=P2, y=P3, fill=min.p)) + 
  geom_tile(color = "black", size=.5)+
  geom_text(data=df,aes(label=round(sig.D, 2)))+
  theme_minimal()+
  scale_fill_gradient(low="lightblue", high = "white", space = "Lab", name="p-value",) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 45, hjust = 1))

### this code will get you the vector needed to combine two sets of pairwise values into a single vector that splits a heatmap at the diagonal
#define n as the number of taxa used in your pairwise Fst comparison
n<-10 #here 3
i<-1 #always begin incrementer (i) at 1
x<-c() #always begin with an empty vector
#while loop that will make the appropriate vector and store it in the variable 'x'
while (i < n){
  #the first set of numbers is simply 2:n
  if(i == 1){
    x<-c(2:n)
    i=i+1
  }
  #the second set of numbers is (2+n+1):(2*n) which we add to the existing vector
  if(i == 2){
    x<-c(x,(2+n+1):(2*n))
    i=i+1
  }
  
    if(n == 3){break} #handle the edge case where n=3 and the code proceeds to the next step even though it is in violation of the outside while loop, because it tests all internal statements before looping back to the top to test the while loop condition
  
  #we then add (2+((i-1)*(n+1))):(i*n) to the vector, where i=3, incrememnt i by 1, and continue adding this vector to the growing vector until i = n-1
  if(i > 2){
    x<-c(x,(2+((i-1)*(n+1))):(i*n))
    i=i+1
  }
}

#order your Fst and fixed difference values correctly in a single mixed vector to plot the Fst values above and # of fixed differences below the diagonal in the heatmap, using the vector you just created (named 'x')
df$value<-df$min.p
df$value[x]<-round(df$sig.D, 2)[x]

#turn off scientific notation
options(scipen = 100, digits = 4)

#plot as heatmap colored by p-value
ggplot(data = df, aes(x=P2, y=P3, fill=min.p)) + 
  geom_tile(color = "black", size=.5)+
  geom_text(data=df,aes(label=signif(value, 2)), size=2.25)+
  theme_minimal()+
  scale_fill_gradient(low="lightblue", high = "white", space = "Lab", name="p-value",) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 45, hjust = 1))

pval<-ggplot(data = df, aes(x=P2, y=P3, fill=min.p)) + 
  geom_tile(color = "black", size=.5)+
  geom_text(data=df,aes(label=signif(value, 2)), size=2.25)+
  theme_minimal()+
  scale_fill_gradient(low="lightblue", high = "white", space = "Lab", name="p-value",) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 45, hjust = 1))

#ggsave("~/Desktop/nmel.ceyx.rad/dsuite/Dstats.pval.pdf", pval, width = 5.5,height = 3.5,units = "in")

#plot as heatmap colored by D statistic
ggplot(data = df, aes(x=P2, y=P3, fill=sig.D)) + 
  geom_tile(color = "black", size=.5)+
  geom_text(data=df,aes(label=signif(value, 2)), size=2.25)+
  theme_minimal()+
  scale_fill_gradient(low="white", high = "red", space = "Lab", name="p-value",) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 45, hjust = 1))

#plot as heatmap colored by D statistic
dstats<-ggplot(data = df, aes(x=P2, y=P3, fill=sig.D)) + 
  geom_tile(color = "black", size=.5)+
  geom_text(data=df,aes(label=signif(value, 2)), size=2.25)+
  theme_minimal()+
  scale_fill_gradient(low="white", high = "red", space = "Lab", name="p-value",) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 45, hjust = 1))

#ggsave("~/Desktop/nmel.ceyx.rad/dsuite/Dstats.pdf", dstats, width = 5.5,height = 3.5,units = "in")

#I am leaving the name of the legend second plot as 'p-value' even though it should be 'D statistic' so that they export at an identical size and I can combine them manually in photoshop
#final product:
knitr::include_graphics("/Users/devonderaad/Desktop/d.screenshot.png")
```

